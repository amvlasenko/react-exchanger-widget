{"version":3,"sources":["redux/types.js","redux/currenciesReducer.js","redux/estimatedAmountReducer.js","redux/minimalAmountReducer.js","redux/setExchange.js","redux/rootReducer.js","features/ServerAPI.js","redux/actions.js","components/Currency.jsx","components/Currencies.jsx","components/Search.jsx","components/GoExchange.jsx","components/Widget.jsx","App.jsx","index.js"],"names":["FETCH_CURRENCIES","FETCH_MINIMAL_AMOUNT","FETCH_ESTIMATED_AMOUNT","SET_EXCHANGE_FROM","SET_EXCHANGE_TO","initialState","currencies","estimatedAmount","minimalAmount","exchangeFrom","ticker","image","exchangeTo","rootReducer","combineReducers","state","action","type","payload","setExchange","API_KEY","a","fetch","then","response","json","catch","err","inputFromValue","fetchMinimalAmount","dispatch","ServerAPI","getMinAmount","minimalAmountResponse","setExchangeFrom","currency","setExchangeTo","Currency","props","name","currencyStyle","backgroundImage","className","style","onClick","aria-label","Currencies","searchString","useState","localCurrenciesList","setLocalCurrenciesList","useEffect","filter","toString","toLowerCase","includes","length","map","Search","searchCurrencies","setSearch","exchangeContext","searchValue","setSearchValue","controlsRef","useRef","evt","current","contains","target","document","removeEventListener","addEventListener","ref","autoFocus","placeholder","value","onChange","preventDefault","handleKey","GoExchange","exchangeError","exchangeErrorValue","htmlFor","id","Widget","useDispatch","useSelector","setInputFromValue","inputToValue","setInputToValue","searchFromIsOpened","setSearchFromIsOpened","searchToIsOpened","setSearchToIsOpened","setSearchFromStringValue","setSearchToStringValue","setExchangeError","setExchangeErrorValue","buildWidget","useCallback","getCurrencies","currenciesResponse","getEstimatedAmount","estimatedAmountResponse","fetchEstimatedAmount","error","minAmount","userValueFrom","e","func","ms","savedArgs","savedThis","isThrottled","throttle","currentFromIcon","currentToIcon","exchangeToError","slice","title","disabled","App","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"8LAAaA,EAAmB,mBACnBC,EAAuB,uBACvBC,EAAyB,yBACzBC,EAAoB,oBACpBC,EAAkB,kBCFzBC,EAAe,CAClBC,WAAY,ICDTD,EAAe,CAClBE,gBAAiB,ICDdF,EAAe,CAClBG,cAAe,GCDZH,EAAe,CAClBI,aAAc,CACXC,OAAQ,MACRC,MAAO,yDAEVC,WAAY,CACTF,OAAQ,MACRC,MAAO,0DCHAE,EAAcC,YAAgB,CACxCR,WJD8B,WAAmC,IAAlCS,EAAiC,uDAAzBV,EAAcW,EAAW,uCAChE,OAAQA,EAAOC,MACZ,KAAKjB,EACF,OAAO,2BAAIe,GAAX,IAAkBT,WAAYU,EAAOE,UACxC,QACG,OAAOH,IIHbP,cFFiC,WAAmC,IAAlCO,EAAiC,uDAAzBV,EAAcW,EAAW,uCACnE,OAAQA,EAAOC,MACZ,KAAKhB,EACF,OAAO,2BAAIc,GAAX,IAAkBP,cAAeQ,EAAOE,UAC3C,QACG,OAAOH,IEFbI,YDIwB,WAAmC,IAAlCJ,EAAiC,uDAAzBV,EAAcW,EAAW,uCAC1D,OAAQA,EAAOC,MACZ,KAAKd,EACF,OAAO,2BAAIY,GAAX,IAAkBN,aAAcO,EAAOE,UAC1C,KAAKd,EACF,OAAO,2BAAIW,GAAX,IAAkBH,WAAYI,EAAOE,UACxC,QACG,OAAOH,ICVbR,gBHJmC,WAAmC,IAAlCQ,EAAiC,uDAAzBV,EAAcW,EAAW,uCACrE,OAAQA,EAAOC,MACZ,KAAKf,EACF,OAAO,2BAAIa,GAAX,IAAkBR,gBAAiBS,EAAOE,UAC7C,QACG,OAAOH,M,qEIXVK,EAAU,mEAED,0IACZ,sBAAAC,EAAA,sEACgBC,MAAM,qEAGfC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BC,OAAM,SAAAC,GAAG,OAAIA,KALpB,mFADY,uHASZ,WAAmBlB,EAAcG,GAAjC,SAAAS,EAAA,sEACgBC,MAAM,0CAAD,OAC2Bb,EAD3B,YAC2CG,EAD3C,oBACiEQ,IAE/EG,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BC,OAAM,SAAAC,GAAG,OAAIA,KALpB,mFATY,gIAiBZ,WAAyBC,EAAgBnB,EAAcG,GAAvD,SAAAS,EAAA,sEACgBC,MAAM,+CAAD,OACgCM,EADhC,YACkDnB,EADlD,YACkEG,EADlE,oBACwFQ,IAEtGG,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BC,OAAM,SAAAC,GAAG,OAAIA,KALpB,mFAjBY,mECcR,SAASE,EAAmBpB,EAAcG,GAC9C,8CAAO,WAAOkB,GAAP,eAAAT,EAAA,sEAC8BU,EAAUC,aAAavB,EAAcG,GADnE,OACAqB,EADA,OAEJH,EAAS,CAACb,KAAMhB,EAAsBiB,QAASe,IAF3C,2CAAP,sDAMI,SAASC,EAAgBC,GAC7B,OAAO,SAACL,GACLA,EAAS,CAACb,KAAMd,EAAmBe,QAASiB,KAI3C,SAASC,EAAcD,GAC3B,OAAO,SAACL,GACLA,EAAS,CAACb,KAAMb,EAAiBc,QAASiB,K,WCXjCE,EApBE,SAACC,GACf,IAAO5B,EAAoC4B,EAApC5B,OAAQ6B,EAA4BD,EAA5BC,KAAM5B,EAAsB2B,EAAtB3B,MAAOQ,EAAemB,EAAfnB,YACtBqB,EAAgB,CACnBC,gBAAiB,OAAS9B,EAAQ,KAOrC,OACG,qBAAK+B,UAAU,oBAAf,SACG,yBAAQC,MAAOH,EAAeI,QANpB,WACbzB,EAAYoB,EAAM5B,IAKiCkC,aAAYN,EAA5D,UACG,uBAAMG,UAAW,eAAjB,UAAkChC,EAAlC,OACA,sBAAMgC,UAAW,aAAjB,SAAgCH,UCoB7BO,EA/BI,SAACR,GACjB,IAAOS,EAAyCT,EAAzCS,aAAczC,EAA2BgC,EAA3BhC,WAAYa,EAAemB,EAAfnB,YACjC,EAAsD6B,mBAAS1C,GAA/D,mBAAO2C,EAAP,KAA4BC,EAA5B,KAYA,OAVAC,qBAAU,WACPD,EACG5C,EAAW8C,QACR,SAACjB,GAAD,OACGA,EAASI,KAAKc,WAAWC,cAAcC,SAASR,EAAaM,WAAWC,gBACxEnB,EAASzB,OAAO2C,WAAWC,cAAcC,SAASR,EAAaM,WAAWC,qBAGnF,CAACP,IAGD,qBAAKL,UAAU,aAAf,SACIO,EAAoBO,OAAS,EACzBP,EAAoBQ,KAAI,SAACtB,GAAD,OACvB,cAAC,EAAD,2BAEOA,GAFP,IAGGI,KAAMJ,EAASI,KACfpB,YAAaA,IAHRgB,EAASzB,WAMlB,qBAAKgC,UAAU,0BAAf,6GCoBCgB,EA7CA,SAACpB,GACb,IAAOqB,EAA4DrB,EAA5DqB,iBAAkBC,EAA0CtB,EAA1CsB,UAAWtD,EAA+BgC,EAA/BhC,WAAYuD,EAAmBvB,EAAnBuB,gBAChD,EAAsCb,mBAAS,IAA/C,mBAAOc,EAAP,KAAoBC,EAApB,KACMC,EAAcC,iBAAO,MAsB3B,OApBAd,qBAAU,WAGP,SAASP,EAAQsB,GACVF,EAAYG,QACbH,EAAYG,QAAQC,SAASF,EAAIG,SAAWT,GAAU,GAEtDU,SAASC,oBAAoB,QAAS3B,GAI5C,OAVA0B,SAASE,iBAAiB,QAAS5B,GAU5B,kBAAM0B,SAASC,oBAAoB,QAAS3B,MACnD,IASA,sBAAKF,UAAU,WAAW+B,IAAKT,EAA/B,UACG,uBACGU,WAAS,EACTzD,KAAK,SACLyB,UAAU,cACViC,YAAY,SACZC,MAAOd,GAAe,GACtBe,SAAU,SAACX,GAAD,OAdnB,SAAmBA,GAChBA,EAAIY,iBACJf,EAAeG,EAAIG,OAAOO,OAC1BjB,EAAiBG,GAWQiB,CAAUb,IAC7BrB,aAAW,uDAEd,cAAC,EAAD,CACGE,aAAce,EACdxD,WAAYA,EACZa,YAAa0C,QCbVmB,EA7BI,SAAC1C,GACjB,IAAO1B,EAAiD0B,EAAjD1B,WAAYqE,EAAqC3C,EAArC2C,cAAeC,EAAsB5C,EAAtB4C,mBAClC,OACG,sBAAKxC,UAAU,aAAf,UACG,wBAAOyC,QAAQ,kBAAf,kBACSvE,GAA0B,WADnC,WAEG,uBACGK,KAAK,OACLyB,UAAU,kBACV0C,GAAG,kBACHvC,aAAW,8BAGjB,yBAAQH,UAAU,iBAAiBG,aAAW,mBAA9C,qBAEG,qBAAKH,UAAWuC,EAAhB,SACE,+BAC0B,sBAAvBC,EACI,oBACuB,qBAAvBA,EACG,4BACA,2BC8MTG,MAtNf,WACG,IAAMvD,EAAWwD,cACXhF,EAAaiF,aAAY,SAACxE,GAAD,OAAWA,EAAMT,WAAWA,cACrDG,EAAe8E,aAAY,SAACxE,GAAD,OAAWA,EAAMI,YAAYV,gBACxDG,EAAa2E,aAAY,SAACxE,GAAD,OAAWA,EAAMI,YAAYP,cACtDJ,EAAgB+E,aACnB,SAACxE,GAAD,OAAWA,EAAMP,cAAcA,iBAE5BD,EAAkBgF,aACrB,SAACxE,GAAD,OAAWA,EAAMR,gBAAgBA,mBAGpC,EAA4CyC,mBAAS,IAArD,mBAAOpB,EAAP,KAAuB4D,EAAvB,KACA,EAAwCxC,mBAAS,IAAjD,mBAAOyC,EAAP,KAAqBC,EAArB,KACA,EAAoD1C,oBAAS,GAA7D,mBAAO2C,EAAP,KAA2BC,EAA3B,KACA,EAAgD5C,oBAAS,GAAzD,mBAAO6C,EAAP,KAAyBC,EAAzB,KACA,EAA0D9C,mBAAS,IAAnE,mBAA8B+C,GAA9B,WACA,EAAsD/C,mBAAS,IAA/D,mBAA4BgD,GAA5B,WACA,EAA0ChD,oBAAS,GAAnD,mBAAOiC,EAAP,KAAsBgB,EAAtB,KACA,EAAoDjD,mBAAS,IAA7D,mBAAOkC,EAAP,KAA2BgB,EAA3B,KAEMC,EAAcC,uBAAY,WAC7BtE,ELzBH,uCAAO,WAAOA,GAAP,eAAAT,EAAA,sEAC2BU,EAAUsE,gBADrC,OACAC,EADA,OAEJxE,EAAS,CAACb,KAAMjB,EAAkBkB,QAASoF,IAFvC,2CAAP,uDK0BGxE,EAASD,EAAmBpB,EAAaC,OAAQE,EAAWF,WAC5D,CAACoB,EAAUrB,EAAcG,IAE5BuC,qBAAU,WACPgD,MACA,CAACA,IAEJhD,qBAAU,WACHvB,GACDE,ELVF,SAA8BF,EAAgBnB,EAAcG,GAChE,8CAAO,WAAOkB,GAAP,eAAAT,EAAA,sEACgCU,EAAUwE,mBAAmB3E,EAAgBnB,EAAcG,GAD3F,OACA4F,EADA,OAEJ1E,EAAS,CAACb,KAAMf,EAAwBgB,QAASsF,IAF7C,2CAAP,sDKSeC,CACN7E,EACAnB,EAAaC,OACbE,EAAWF,WAGjB,CAACkB,IAEJuB,qBAAU,WACPrB,EAASD,EAAmBpB,EAAaC,OAAQE,EAAWF,WAC5D,CAACoB,EAAUrB,EAAcG,IAE5BuC,qBAAU,WACP8C,IAAiBzF,EAAckG,OAC/BR,EAAsB1F,EAAckG,MAAQlG,EAAckG,MAAQ,IAClElB,EAAkBhF,EAAckG,MAAQ,EAAIlG,EAAcmG,aAC1D,CAACnG,IAEJ2C,qBAAU,WACP8C,GAAiB1F,EAAgBA,iBACjC2F,EACG3F,EAAgBA,gBAAkB,GAAKA,EAAgBmG,OAE1DhB,EACGnF,EAAgBA,gBAAkBA,EAAgBA,gBAAkB,OAEvE,CAACA,IAEJ,IA4BMqG,EAAgB,SAACC,GACpBrB,EAAkBqB,EAAExC,OAAOO,OA7Bb,SAACkC,EAAMC,GACrB,IACGC,EACAC,EAFCC,GAAc,EA8BlBC,CACGpF,EAAUwE,mBACP3E,EACAnB,EAAaC,OACbE,EAAWF,UA8BhB0G,EAAkB,CACnB3E,gBAAiB,OAAShC,EAAaE,MAAQ,KAE9C0G,GAAgB,CACjB5E,gBAAiB,OAAS7B,EAAWD,MAAQ,KAE5C2G,GAAkB,SAEtB,OADiBA,GAAjBrC,EAAmC,QAA8B,SAE9D,qBAAKvC,UAAU,MAAf,SACG,sBAAKA,UAAU,oBAAf,UACG,qBAAKA,UAAU,eAAf,SACIiD,EACI,cAAC,EAAD,CACChC,iBAAkBoC,EAClBnC,UAAWgC,EACXtF,WAAYA,EACZuD,gBAzCF,SAACtB,EAAM5B,GACpBmB,EACGI,EAAe,WAAf,cACM5B,EAAW8C,QACX,SAACjB,GAAD,OAAcA,EAASI,OAASA,GAAQJ,EAASxB,QAAUA,QAIpEiF,GAAsB,GACtBG,EAAyB,OAkCX,sBAAKrD,UAAU,WAAf,UACC,uBACGzB,KAAK,OACLyB,UAAW,aACXmC,SAAU+B,EACVhC,MAAOhD,GAAkB,GACzBiB,aAAW,8BAEd,wBACGH,UAAU,cACVC,MAAOyE,EACPxE,QAAS,SAACiE,GACPjB,GAAuBD,IAE1B9C,aAAW,8BANd,SAQIpC,EAAaC,OAAO6G,MAAM,EAAG,UAM1C,wBACG7E,UAAU,cACVG,aAAW,kCACX2E,MAAM,kCACNC,UAAQ,IAGX,qBAAK/E,UAAU,aAAf,SACImD,EACI,cAAC,EAAD,CACClC,iBAAkBqC,EAClBpC,UAAWkC,EACXxF,WAAYA,EACZuD,gBAlEJ,SAACtB,EAAM5B,GAClBmB,EACGM,EAAa,WAAb,cACM9B,EAAW8C,QACX,SAACjB,GAAD,OAAcA,EAASI,OAASA,GAAQJ,EAASxB,QAAUA,QAIpEmF,GAAoB,GACpBE,EAAuB,OA2DT,sBAAKtD,UAAU,WAAf,UACC,uBACGzB,KAAK,OACLyB,UAAW,aACXmC,SAAU+B,EACVhC,MAAOa,GAAgB,GACvB5C,aAAW,8BAEd,wBACGH,UAAU,cACVC,MAAO0E,GACPzE,QAAS,SAACiE,GACPf,GAAqBH,IAExB9C,aAAW,8BANd,SAQIjC,EAAWF,OAAO6G,MAAM,EAAG,UAMxC,cAAC,EAAD,CACG3G,WAAYA,EAAW2B,KACvB0C,cAAeqC,GACfpC,mBAAoBA,UC/MpBwC,EAVH,WACT,OACG,sBAAKhF,UAAW,UAAhB,UACG,iDACA,uDACA,cAAC,EAAD,Q,QCEHiF,EAAQC,YACX/G,EACAgH,YACGC,YAAgBC,OAItBC,IAASC,OACN,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACG,cAAC,EAAD,MAEHrD,SAAS4D,eAAe,W","file":"static/js/main.446c3cd3.chunk.js","sourcesContent":["export const FETCH_CURRENCIES = 'FETCH_CURRENCIES';\nexport const FETCH_MINIMAL_AMOUNT = 'FETCH_MINIMAL_AMOUNT';\nexport const FETCH_ESTIMATED_AMOUNT = 'FETCH_ESTIMATED_AMOUNT';\nexport const SET_EXCHANGE_FROM = 'SET_EXCHANGE_FROM';\nexport const SET_EXCHANGE_TO = 'SET_EXCHANGE_TO';\n","import {FETCH_CURRENCIES} from './types';\n\nconst initialState = {\n   currencies: [],\n};\n\nexport const currenciesReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case FETCH_CURRENCIES:\n         return {...state, currencies: action.payload};\n      default:\n         return state;\n   }\n};\n","import {FETCH_ESTIMATED_AMOUNT} from './types';\n\nconst initialState = {\n   estimatedAmount: '',\n};\n\nexport const estimatedAmountReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case FETCH_ESTIMATED_AMOUNT:\n         return {...state, estimatedAmount: action.payload};\n      default:\n         return state;\n   }\n};","import {FETCH_MINIMAL_AMOUNT} from './types';\n\nconst initialState = {\n   minimalAmount: 0,\n};\n\nexport const minimalAmountReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case FETCH_MINIMAL_AMOUNT:\n         return {...state, minimalAmount: action.payload};\n      default:\n         return state;\n   }\n};","import {SET_EXCHANGE_FROM, SET_EXCHANGE_TO} from './types';\n\nconst initialState = {\n   exchangeFrom: {\n      ticker: 'btc',\n      image: 'https://changenow.io/images/sprite/currencies/btc.svg',\n   },\n   exchangeTo: {\n      ticker: 'eth',\n      image: 'https://changenow.io/images/sprite/currencies/eth.svg',\n   },\n};\n\nexport const setExchange = (state = initialState, action) => {\n   switch (action.type) {\n      case SET_EXCHANGE_FROM:\n         return {...state, exchangeFrom: action.payload};\n      case SET_EXCHANGE_TO:\n         return {...state, exchangeTo: action.payload};\n      default:\n         return state;\n   }\n};","import {combineReducers} from 'redux';\nimport {currenciesReducer} from './currenciesReducer';\nimport {estimatedAmountReducer} from './estimatedAmountReducer';\nimport {minimalAmountReducer} from './minimalAmountReducer';\nimport {setExchange} from './setExchange';\n\nexport const rootReducer = combineReducers({\n   currencies: currenciesReducer,\n   minimalAmount: minimalAmountReducer,\n   setExchange: setExchange,\n   estimatedAmount: estimatedAmountReducer\n});\n","const API_KEY = 'bf09c6abbb5ec5bbbd0e210ad018ab010d460dc474c2e7361ccd27378e874a05';\n\nexport default new (class ServerAPI {\n   async getCurrencies() {\n      return await fetch(\n         `https://api.changenow.io/v1/currencies?active=true&fixedRate=true`\n      )\n         .then((response => response.json()))\n         .catch(err => err);\n   }\n\n   async getMinAmount(exchangeFrom, exchangeTo) {\n      return await fetch(\n         `https://api.changenow.io/v1/min-amount/${exchangeFrom}_${exchangeTo}?api_key=${API_KEY}`\n      )\n         .then((response => response.json()))\n         .catch(err => err);\n   }\n\n   async getEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo) {\n      return await fetch(\n         `https://api.changenow.io/v1/exchange-amount/${inputFromValue}/${exchangeFrom}_${exchangeTo}?api_key=${API_KEY}`\n      )\n         .then((response => response.json()))\n         .catch(err => err);\n   }\n})();\n","import ServerAPI from '../features/ServerAPI';\nimport {\n   FETCH_CURRENCIES,\n   FETCH_ESTIMATED_AMOUNT,\n   FETCH_MINIMAL_AMOUNT,\n   SET_EXCHANGE_FROM,\n   SET_EXCHANGE_TO\n} from './types';\n\nexport function fetchCurrencies() {\n   return async (dispatch) => {\n      let currenciesResponse = await ServerAPI.getCurrencies();\n      dispatch({type: FETCH_CURRENCIES, payload: currenciesResponse});\n   };\n}\n\nexport function fetchMinimalAmount(exchangeFrom, exchangeTo) {\n   return async (dispatch) => {\n      let minimalAmountResponse = await ServerAPI.getMinAmount(exchangeFrom, exchangeTo);\n      dispatch({type: FETCH_MINIMAL_AMOUNT, payload: minimalAmountResponse});\n   };\n}\n\nexport function setExchangeFrom(currency) {\n   return (dispatch) => {\n      dispatch({type: SET_EXCHANGE_FROM, payload: currency});\n   };\n}\n\nexport function setExchangeTo(currency) {\n   return (dispatch) => {\n      dispatch({type: SET_EXCHANGE_TO, payload: currency});\n   };\n}\n\nexport function fetchEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo) {\n   return async (dispatch) => {\n      let estimatedAmountResponse = await ServerAPI.getEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo);\n      dispatch({type: FETCH_ESTIMATED_AMOUNT, payload: estimatedAmountResponse});\n   };\n}\n\n","const Currency = (props) => {\n   const {ticker, name, image, setExchange} = props;\n   const currencyStyle = {\n      backgroundImage: 'url(' + image + ')',\n   };\n\n   const handler = () => {\n      setExchange(name, image);\n   };\n\n   return (\n      <div className=\"exchange-currency\">\n         <button style={currencyStyle} onClick={handler} aria-label={name}>\n            <span className={'cryptoTicker'}>{ticker} </span>\n            <span className={'cryptoName'}>{name}</span>\n         </button>\n      </div>\n   );\n};\n\nexport default Currency;\n","import {useEffect, useState} from 'react';\nimport Currency from './Currency';\n\nconst Currencies = (props) => {\n   const {searchString, currencies, setExchange} = props;\n   const [localCurrenciesList, setLocalCurrenciesList] = useState(currencies);\n\n   useEffect(() => {\n      setLocalCurrenciesList(\n         currencies.filter(\n            (currency) =>\n               currency.name.toString().toLowerCase().includes(searchString.toString().toLowerCase()) ||\n               currency.ticker.toString().toLowerCase().includes(searchString.toString().toLowerCase())\n         )\n      );\n   }, [searchString]);\n\n   return (\n      <div className=\"currencies\">\n         {localCurrenciesList.length > 0\n            ? localCurrenciesList.map((currency) => (\n               <Currency\n                  key={currency.ticker}\n                  {...currency}\n                  name={currency.name}\n                  setExchange={setExchange}\n               />\n            ))\n            : <div className=\"exchange-currency empty\">Ничего не найдено</div>\n         }\n      </div>\n   );\n};\n\nexport default Currencies;\n","import Currencies from './Currencies';\nimport {useEffect, useRef, useState} from 'react';\n\nconst Search = (props) => {\n   const {searchCurrencies, setSearch, currencies, exchangeContext} = props;\n   const [searchValue, setSearchValue] = useState('');\n   const controlsRef = useRef(null);\n\n   useEffect(() => {\n      document.addEventListener('click', onClick);\n\n      function onClick(evt) {\n         if (controlsRef.current) {\n            controlsRef.current.contains(evt.target) || setSearch(false);\n         } else {\n            document.removeEventListener('click', onClick);\n         }\n      }\n\n      return () => document.removeEventListener('click', onClick);\n   }, []);\n\n   function handleKey(evt) {\n      evt.preventDefault();\n      setSearchValue(evt.target.value);\n      searchCurrencies(searchValue);\n   };\n\n   return (\n      <div className=\"controls\" ref={controlsRef}>\n         <input\n            autoFocus\n            type=\"search\"\n            className=\"user-search\"\n            placeholder=\"Search\"\n            value={searchValue || ''}\n            onChange={(evt) => handleKey(evt)}\n            aria-label=\"Enter the name or ticker of the currency to search\"\n         />\n         <Currencies\n            searchString={searchValue}\n            currencies={currencies}\n            setExchange={exchangeContext}\n         />\n      </div>\n   );\n};\n\nexport default Search;\n","const GoExchange = (props) => {\n   const {exchangeTo, exchangeError, exchangeErrorValue} = props;\n   return (\n      <div className=\"goExchange\">\n         <label htmlFor=\"exchangeAddress\">\n            Your {exchangeTo ? exchangeTo : 'Ethereum'} address\n            <input\n               type=\"text\"\n               className=\"exchangeAddress\"\n               id=\"exchangeAddress\"\n               aria-label=\"Enter exchange address\"\n            />\n         </label>\n         <button className=\"exchangeSubmit\" aria-label=\"Make an exchange\">\n            Exchange\n            <div className={exchangeError}>\n              <span>\n                {exchangeErrorValue === 'deposit_too_small'\n                   ? 'Deposit too small'\n                   : exchangeErrorValue === 'pair_is_inactive'\n                      ? 'This pair is disabled now'\n                      : 'Enter deposit'}\n              </span>\n            </div>\n         </button>\n      </div>\n   );\n};\n\nexport default GoExchange;","import React, {useCallback, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport ServerAPI from '../features/ServerAPI';\nimport {\n   fetchCurrencies,\n   fetchEstimatedAmount,\n   fetchMinimalAmount,\n   setExchangeFrom,\n   setExchangeTo,\n} from '../redux/actions';\nimport Search from './Search';\nimport GoExchange from './GoExchange';\n\nfunction Widget() {\n   const dispatch = useDispatch();\n   const currencies = useSelector((state) => state.currencies.currencies);\n   const exchangeFrom = useSelector((state) => state.setExchange.exchangeFrom);\n   const exchangeTo = useSelector((state) => state.setExchange.exchangeTo);\n   const minimalAmount = useSelector(\n      (state) => state.minimalAmount.minimalAmount\n   );\n   const estimatedAmount = useSelector(\n      (state) => state.estimatedAmount.estimatedAmount\n   );\n\n   const [inputFromValue, setInputFromValue] = useState('');\n   const [inputToValue, setInputToValue] = useState('');\n   const [searchFromIsOpened, setSearchFromIsOpened] = useState(false);\n   const [searchToIsOpened, setSearchToIsOpened] = useState(false);\n   const [searchFromStringValue, setSearchFromStringValue] = useState('');\n   const [searchToStringValue, setSearchToStringValue] = useState('');\n   const [exchangeError, setExchangeError] = useState(false);\n   const [exchangeErrorValue, setExchangeErrorValue] = useState('');\n\n   const buildWidget = useCallback(() => {\n      dispatch(fetchCurrencies());\n      dispatch(fetchMinimalAmount(exchangeFrom.ticker, exchangeTo.ticker));\n   }, [dispatch, exchangeFrom, exchangeTo]);\n\n   useEffect(() => {\n      buildWidget();\n   }, [buildWidget]);\n\n   useEffect(() => {\n      if (inputFromValue) {\n         dispatch(fetchEstimatedAmount(\n            inputFromValue,\n            exchangeFrom.ticker,\n            exchangeTo.ticker\n         ));\n      }\n   }, [inputFromValue]);\n\n   useEffect(() => {\n      dispatch(fetchMinimalAmount(exchangeFrom.ticker, exchangeTo.ticker));\n   }, [dispatch, exchangeFrom, exchangeTo]);\n\n   useEffect(() => {\n      setExchangeError(minimalAmount.error ? true : false);\n      setExchangeErrorValue(minimalAmount.error ? minimalAmount.error : '');\n      setInputFromValue(minimalAmount.error ? 0 : minimalAmount.minAmount);\n   }, [minimalAmount]);\n\n   useEffect(() => {\n      setExchangeError(estimatedAmount.estimatedAmount ? false : true);\n      setExchangeErrorValue(\n         estimatedAmount.estimatedAmount ? '' : estimatedAmount.error\n      );\n      setInputToValue(\n         estimatedAmount.estimatedAmount ? estimatedAmount.estimatedAmount : '-'\n      );\n   }, [estimatedAmount]);\n\n   const throttle = (func, ms) => {\n      let isThrottled = false,\n         savedArgs,\n         savedThis;\n\n      function wrapper() {\n         if (isThrottled) {\n            savedArgs = arguments;\n            savedThis = this;\n            return;\n         }\n\n         func.apply(this, arguments);\n\n         isThrottled = true;\n\n         setTimeout(function () {\n            isThrottled = false;\n            if (savedArgs) {\n               wrapper.apply(savedThis, savedArgs);\n               savedArgs = savedThis = null;\n            }\n         }, ms);\n      }\n\n      return wrapper;\n   };\n\n   const userValueFrom = (e) => {\n      setInputFromValue(e.target.value);\n\n      throttle(\n         ServerAPI.getEstimatedAmount(\n            inputFromValue,\n            exchangeFrom.ticker,\n            exchangeTo.ticker\n         ),\n         500\n      );\n   };\n\n   const setFrom = (name, image) => {\n      dispatch(\n         setExchangeFrom(\n            ...currencies.filter(\n               (currency) => currency.name === name && currency.image === image\n            )\n         )\n      );\n      setSearchFromIsOpened(false);\n      setSearchFromStringValue('');\n   };\n\n   const setTo = (name, image) => {\n      dispatch(\n         setExchangeTo(\n            ...currencies.filter(\n               (currency) => currency.name === name && currency.image === image\n            )\n         )\n      );\n      setSearchToIsOpened(false);\n      setSearchToStringValue('');\n   };\n\n   let currentFromIcon = {\n      backgroundImage: 'url(' + exchangeFrom.image + ')',\n   };\n   let currentToIcon = {\n      backgroundImage: 'url(' + exchangeTo.image + ')',\n   };\n   let exchangeToError = 'hidden';\n   exchangeError ? (exchangeToError = 'error') : (exchangeToError = 'hidden');\n   return (\n      <div className=\"App\">\n         <div className=\"exchangeContainer\">\n            <div className=\"exchangeFrom\">\n               {searchFromIsOpened\n                  ? <Search\n                     searchCurrencies={setSearchFromStringValue}\n                     setSearch={setSearchFromIsOpened}\n                     currencies={currencies}\n                     exchangeContext={setFrom}\n                  />\n                  : <div className=\"controls\">\n                     <input\n                        type=\"text\"\n                        className={'inputValue'}\n                        onChange={userValueFrom}\n                        value={inputFromValue || ''}\n                        aria-label=\"Enter the exchange amount\"\n                     />\n                     <button\n                        className=\"currentFrom\"\n                        style={currentFromIcon}\n                        onClick={(e) => {\n                           setSearchFromIsOpened(!searchFromIsOpened);\n                        }}\n                        aria-label=\"Select currency to exchange\"\n                     >\n                        {exchangeFrom.ticker.slice(0, 4)}\n                     </button>\n                  </div>\n               }\n            </div>\n\n            <button\n               className=\"swapTickers\"\n               aria-label=\"Swap tickers, not available now\"\n               title=\"Swap tickers, not available now\"\n               disabled\n            ></button>\n\n            <div className=\"exchangeTo\">\n               {searchToIsOpened\n                  ? <Search\n                     searchCurrencies={setSearchToStringValue}\n                     setSearch={setSearchToIsOpened}\n                     currencies={currencies}\n                     exchangeContext={setTo}\n                  />\n                  : <div className=\"controls\">\n                     <input\n                        type=\"text\"\n                        className={'inputValue'}\n                        onChange={userValueFrom}\n                        value={inputToValue || ''}\n                        aria-label=\"Enter the exchange amount\"\n                     />\n                     <button\n                        className=\"currentFrom\"\n                        style={currentToIcon}\n                        onClick={(e) => {\n                           setSearchToIsOpened(!searchFromIsOpened);\n                        }}\n                        aria-label=\"Select currency to exchange\"\n                     >\n                        {exchangeTo.ticker.slice(0, 4)}\n                     </button>\n                  </div>\n               }\n            </div>\n\n            <GoExchange\n               exchangeTo={exchangeTo.name}\n               exchangeError={exchangeToError}\n               exchangeErrorValue={exchangeErrorValue}\n            />\n\n         </div>\n      </div>\n   );\n}\n\nexport default Widget;\n","import Widget from './components/Widget';\n\nconst App = () => {\n   return (\n      <div className={'content'}>\n         <h1>Crypto Exchange</h1>\n         <p>Exchange fast and easy</p>\n         <Widget/>\n      </div>\n   );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {applyMiddleware, compose, createStore} from 'redux';\nimport {rootReducer} from './redux/rootReducer';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(\n   rootReducer,\n   compose(\n      applyMiddleware(thunk)\n   )\n);\n\nReactDOM.render(\n   <Provider store={store}>\n      <App/>\n   </Provider>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}