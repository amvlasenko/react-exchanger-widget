{"version":3,"sources":["Components/Currency.jsx","Components/Currencies.jsx","Components/Search.jsx","Components/Widget.jsx","App.jsx","index.js"],"names":["Currency","props","ticker","name","image","setCurrent","currencyStyle","backgroundImage","className","style","onClick","aria-label","Currencies","currencies","filter","currency","includes","searchString","map","getMinAmount","getEstimatedAmount","Search","state","search","handleKey","evt","searchCurrencies","type","placeholder","value","this","onChange","e","setState","target","onKeyDown","React","Component","API_KEY","process","Widget","exchangeFrom","exchangeTo","minimalAmount","estimatedAmount","inputFromValue","inputToValue","searchFromIsOpened","searchToIsOpened","searchFromStringValue","searchToStringValue","exchangeError","exchangeErrorValue","fetch","then","response","json","data","error","minAmount","catch","console","log","userValueExchange","setFrom","setTo","currentFromIcon","currentToIcon","exchangeToError","slice","htmlFor","id","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAAA,SAASA,EAASC,GACd,IAAQC,EAAoCD,EAApCC,OAAQC,EAA4BF,EAA5BE,KAAMC,EAAsBH,EAAtBG,MAAOC,EAAeJ,EAAfI,WACvBC,EAAgB,CAClBC,gBAAiB,OAASH,EAAQ,KAOtC,OACI,qBAAKI,UAAU,oBAAf,SACI,yBAAQC,MAAOH,EAAeI,QANtB,WACZL,EAAWF,EAAMC,IAKmCO,aAAYR,EAA5D,UACI,uBAAMK,UAAW,eAAjB,UAAkCN,EAAlC,OACA,sBAAMM,UAAW,aAAjB,SAAgCL,SCZhD,SAASS,EAAWX,GAChB,OACI,qBAAKO,UAAU,aAAf,SACKP,EAAMY,WACFC,QACG,SAACC,GAAD,OACIA,EAASZ,KAAKa,SAASf,EAAMgB,eAC7BF,EAASb,OAAOc,SAASf,EAAMgB,iBAEtCC,KAAI,SAACH,GAAD,OACD,cAACf,EAAD,2BAEQe,GAFR,IAGIV,WAAYJ,EAAMI,WAClBc,aAAclB,EAAMkB,aACpBC,mBAAoBnB,EAAMmB,mBAC1BjB,KAAMY,EAASZ,OALVY,EAASZ,W,ICXhCkB,E,4MACFC,MAAQ,CACJC,OAAQ,I,EAGZC,UAAY,SAACC,GACT,EAAKxB,MAAMyB,iBAAiB,EAAKJ,MAAMC,S,4CAG3C,WAAU,IAAD,OACL,OACI,uBACII,KAAK,SACLnB,UAAU,cACVoB,YAAY,SACZC,MAAOC,KAAKR,MAAMC,OAClBQ,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEV,OAAQS,EAAEE,OAAOL,SAClDM,UAAWL,KAAKN,UAChBb,aAAW,2D,GAlBNyB,IAAMC,WCErBC,EAAUC,mEAEVC,E,4MACFlB,MAAQ,CACJT,WAAY,GACZ4B,aAAc,CACV,CACIvC,OAAQ,MACRE,MAAO,0DAGfsC,WAAY,CACR,CACIxC,OAAQ,MACRE,MAAO,0DAGfuC,cAAe,GACfC,gBAAiB,GACjBC,eAAgB,GAChBC,aAAc,GACdC,oBAAoB,EACpBC,kBAAkB,EAClBC,sBAAuB,GACvBC,oBAAqB,GACrBC,eAAe,EACfC,mBAAoB,I,EAkCxBjC,aAAe,WACX,IAAOsB,EAAP,YAAuB,EAAKnB,MAAMmB,aAAlC,MACOC,EAAP,YAAqB,EAAKpB,MAAMoB,WAAhC,MAEAW,MAAM,0CAAD,OACyCZ,EAAavC,OADtD,YACgEwC,EAAWxC,OAD3E,oBAC6FoC,IAE7FgB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKxB,SAAS,CAAEU,cAAec,OAC9CH,MAAK,kBACD,EAAKhC,MAAMqB,cAAce,MAMpB,EAAKzB,SAAS,CACVa,aAAc,IACdK,eAAe,EACfC,mBAAoB,EAAK9B,MAAMqB,cAAce,MAC7Cb,eAAgB,MATpB,EAAKZ,SAAS,CACVkB,eAAe,EACfC,mBAAoB,GACpBP,eAAgB,EAAKvB,MAAMqB,cAAcgB,eAStDL,MAAK,kBACFD,MAAM,+CAAD,OAC8C,EAAK/B,MAAMuB,eADzD,YAC2EJ,EAAavC,OADxF,YACkGwC,EAAWxC,OAD7G,oBAC+HoC,IAE/HgB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKxB,SAAS,CAAEW,gBAAiBa,OAChDH,MAAK,kBACF,EAAKrB,SAAS,CACVa,aACI,EAAKxB,MAAMsB,gBAAgBA,wBAI9CgB,OAAM,SAACF,GAAD,OAAWG,QAAQC,IAAI,QAASJ,O,EAG/CtC,mBAAqB,WACjB,IAAOqB,EAAP,YAAuB,EAAKnB,MAAMmB,aAAlC,MACOC,EAAP,YAAqB,EAAKpB,MAAMoB,WAAhC,MACAW,MAAM,+CAAD,OAC8C,EAAK/B,MAAMuB,eADzD,YAC2EJ,EAAavC,OADxF,YACkGwC,EAAWxC,OAD7G,oBAC+HoC,IAE/HgB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKxB,SAAS,CAAEW,gBAAiBa,OAChDH,MAAK,kBACF,EAAKhC,MAAMsB,gBAAgBA,gBACrB,EAAKX,SAAS,CACVa,aACI,EAAKxB,MAAMsB,gBAAgBA,gBAC/BO,eAAe,EACfC,mBAAoB,KAExB,EAAKnB,SAAS,CACVa,aAAc,IACdK,eAAe,EACfC,mBAAoB,EAAK9B,MAAMsB,gBAAgBc,WAG5DE,OAAM,SAACF,GAAD,OAAWG,QAAQC,IAAI,QAASJ,O,EAG/CK,kBAAoB,SAAC/B,GACjB,EAAKC,UACD,WACI,MAAO,CAAEY,eAAgBb,EAAEE,OAAOL,UAEtC,WACI,EAAKT,yB,EAKjB4C,QAAU,SAAC7D,EAAMC,GACb,EAAK6B,UACD,WACI,MAAO,CACHQ,aAAc,EAAKnB,MAAMT,WAAWC,QAChC,SAACC,GAAD,OACIA,EAASZ,OAASA,GAAQY,EAASX,QAAUA,KAErD2C,oBAAoB,EACpBE,sBAAuB,OAG/B,kBAAM,EAAK9B,mB,EAInB8C,MAAQ,SAAC9D,EAAMC,GACX,EAAK6B,UACD,WACI,MAAO,CACHS,WAAY,EAAKpB,MAAMT,WAAWC,QAC9B,SAACC,GAAD,OACIA,EAASZ,OAASA,GAAQY,EAASX,QAAUA,KAErD4C,kBAAkB,EAClBE,oBAAqB,OAG7B,kBAAM,EAAK/B,mB,uDAtInB,WAAqB,IAAD,OAChBkC,MACI,qEAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKxB,SAAS,CAAEpB,WAAY4C,OAC3CG,OAAM,SAACF,GAAD,OAAWG,QAAQC,IAAI,QAASJ,MAC3CL,MAAM,0DAAD,OACyDf,IAEzDgB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKxB,SAAS,CAAEU,cAAec,EAAKE,eACnDL,MAAK,kBACF,EAAKrB,SAAS,CAAEY,eAAgB,EAAKvB,MAAMqB,mBAE9CW,MAAK,kBACFD,MAAM,+CAAD,OAC8C,EAAK/B,MAAMuB,eADzD,4BAC2FP,IAE3FgB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKxB,SAAS,CAAEW,gBAAiBa,OAChDH,MAAK,kBACF,EAAKrB,SAAS,CACVa,aACI,EAAKxB,MAAMsB,gBAAgBA,wBAI9CgB,OAAM,SAACF,GAAD,OAAWG,QAAQC,IAAI,QAASJ,Q,oBA8G/C,WAAU,IAAD,OACEjB,EAAP,YAAuBX,KAAKR,MAAMmB,aAAlC,MACOC,EAAP,YAAqBZ,KAAKR,MAAMoB,WAAhC,MACMwB,EAAkB,CACpB3D,gBAAiB,OAASkC,EAAarC,MAAQ,KAE7C+D,EAAgB,CAClB5D,gBAAiB,OAASmC,EAAWtC,MAAQ,KAE7CgE,EAAkB,SAItB,OAFOA,EADPtC,KAAKR,MAAM6B,cACc,QACA,SAErB,qBAAK3C,UAAU,MAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,sBAAKA,UAAU,WAAf,UACKsB,KAAKR,MAAMyB,mBACR,cAAC,EAAD,CACIrB,iBAAkB,SAACM,GAAD,OACd,EAAKC,SAAS,CACVgB,sBAAuBjB,OAKnC,uBACIL,KAAK,OACLnB,UAAW,aACXuB,SAAUD,KAAKiC,kBACflC,MAAOC,KAAKR,MAAMuB,eAClBlC,aAAW,8BAGjBmB,KAAKR,MAAMyB,mBAcT,KAbA,wBACIvC,UAAU,cACVC,MAAOyD,EACPxD,QAAS,SAACsB,GACN,EAAKC,SAAS,CACVc,oBACK,EAAKzB,MAAMyB,sBAGxBpC,aAAW,8BATf,SAWK8B,EAAavC,OAAOmE,MAAM,EAAG,KAGrCvC,KAAKR,MAAMyB,mBACR,cAACnC,EAAD,CACIK,aACIa,KAAKR,MAAM2B,sBAEfpC,WAAYiB,KAAKR,MAAMT,WACvBR,WAAYyB,KAAKkC,QACjB7C,aAAcW,KAAKX,eAEvB,UAGZ,wBACIX,UAAU,cACVG,aAAW,wCAGf,qBAAKH,UAAU,aAAf,SACI,sBAAKA,UAAU,WAAf,UACKsB,KAAKR,MAAM0B,iBACR,cAAC,EAAD,CACItB,iBAAkB,SAACM,GAAD,OACd,EAAKC,SAAS,CACViB,oBAAqBlB,OAKjC,uBACIL,KAAK,OACLnB,UAAU,aACVuB,SAAU,SAACC,GAAD,OACN,EAAKC,SAAS,CACVa,aAAcd,EAAEE,OAAOL,SAG/BA,MAAOC,KAAKR,MAAMwB,aAClBnC,aAAW,iBAGjBmB,KAAKR,MAAM0B,iBAcT,KAbA,wBACIxC,UAAU,YACVC,MAAO0D,EACPzD,QAAS,SAACsB,GACN,EAAKC,SAAS,CACVe,kBACK,EAAK1B,MAAM0B,oBAGxBrC,aAAW,8BATf,SAWK+B,EAAWxC,OAAOmE,MAAM,EAAG,KAInCvC,KAAKR,MAAM0B,iBACR,cAACpC,EAAD,CACIK,aACIa,KAAKR,MAAM4B,oBAEfrC,WAAYiB,KAAKR,MAAMT,WACvBR,WAAYyB,KAAKmC,MACjB9C,aAAcW,KAAKX,eAEvB,UAGZ,sBAAKX,UAAU,aAAf,UACI,wBAAO8D,QAAQ,kBAAf,iBACS,IACJ5B,EAAWvC,KAAOuC,EAAWvC,KAAO,WAAY,IAFrD,UAII,uBACIwB,KAAK,OACLnB,UAAU,kBACV+D,GAAG,kBACH5D,aAAW,8BAGnB,yBACIH,UAAU,iBACVG,aAAW,mBAFf,qBAKI,qBAAKH,UAAW4D,EAAhB,SACI,+BAEI,sBADCtC,KAAKR,MAAM8B,mBAEN,oBAEA,qBADAtB,KAAKR,MAAM8B,mBAEX,4BACA,mC,GApTrBhB,IAAMC,WCQZmC,MAVf,WACI,OACI,sBAAKhE,UAAW,UAAhB,UACI,iDACA,uDACA,cAAC,EAAD,QCJZiE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1d4c6f1d.chunk.js","sourcesContent":["function Currency(props) {\r\n    const { ticker, name, image, setCurrent } = props;\r\n    const currencyStyle = {\r\n        backgroundImage: 'url(' + image + ')',\r\n    };\r\n\r\n    const handler = () => {\r\n        setCurrent(name, image);\r\n    };\r\n\r\n    return (\r\n        <div className='exchange-currency'>\r\n            <button style={currencyStyle} onClick={handler} aria-label={name}>\r\n                <span className={'cryptoTicker'}>{ticker} </span>\r\n                <span className={'cryptoName'}>{name}</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\nexport { Currency };\r\n","import { Currency } from './Currency';\r\n\r\nfunction Currencies(props) {\r\n    return (\r\n        <div className='currencies'>\r\n            {props.currencies\r\n                .filter(\r\n                    (currency) =>\r\n                        currency.name.includes(props.searchString) ||\r\n                        currency.ticker.includes(props.searchString)\r\n                )\r\n                .map((currency) => (\r\n                    <Currency\r\n                        key={currency.name}\r\n                        {...currency}\r\n                        setCurrent={props.setCurrent}\r\n                        getMinAmount={props.getMinAmount}\r\n                        getEstimatedAmount={props.getEstimatedAmount}\r\n                        name={currency.name}\r\n                    />\r\n                ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Currencies };\r\n","import React from 'react';\r\n\r\nclass Search extends React.Component {\r\n    state = {\r\n        search: '',\r\n    };\r\n\r\n    handleKey = (evt) => {\r\n        this.props.searchCurrencies(this.state.search);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                type='search'\r\n                className='user-search'\r\n                placeholder='Search'\r\n                value={this.state.search}\r\n                onChange={(e) => this.setState({ search: e.target.value })}\r\n                onKeyDown={this.handleKey}\r\n                aria-label='Enter the name or ticker of the currency to search'\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport { Search };\r\n","import React from 'react';\r\nimport { Currencies } from './Currencies';\r\nimport { Search } from './Search';\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nclass Widget extends React.Component {\r\n    state = {\r\n        currencies: [],\r\n        exchangeFrom: [\r\n            {\r\n                ticker: 'btc',\r\n                image: 'https://changenow.io/images/sprite/currencies/btc.svg',\r\n            },\r\n        ],\r\n        exchangeTo: [\r\n            {\r\n                ticker: 'eth',\r\n                image: 'https://changenow.io/images/sprite/currencies/eth.svg',\r\n            },\r\n        ],\r\n        minimalAmount: '',\r\n        estimatedAmount: '',\r\n        inputFromValue: '',\r\n        inputToValue: '',\r\n        searchFromIsOpened: false,\r\n        searchToIsOpened: false,\r\n        searchFromStringValue: '',\r\n        searchToStringValue: '',\r\n        exchangeError: false,\r\n        exchangeErrorValue: '',\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(\r\n            'https://api.changenow.io/v1/currencies?active=true&fixedRate=true'\r\n        )\r\n            .then((response) => response.json())\r\n            .then((data) => this.setState({ currencies: data }))\r\n            .catch((error) => console.log('error', error));\r\n        fetch(\r\n            `https://api.changenow.io/v1/min-amount/btc_eth?api_key=${API_KEY}`\r\n        )\r\n            .then((response) => response.json())\r\n            .then((data) => this.setState({ minimalAmount: data.minAmount }))\r\n            .then(() =>\r\n                this.setState({ inputFromValue: this.state.minimalAmount })\r\n            )\r\n            .then(() =>\r\n                fetch(\r\n                    `https://api.changenow.io/v1/exchange-amount/${this.state.inputFromValue}/btc_eth?api_key=${API_KEY}`\r\n                )\r\n                    .then((response) => response.json())\r\n                    .then((data) => this.setState({ estimatedAmount: data }))\r\n                    .then(() =>\r\n                        this.setState({\r\n                            inputToValue:\r\n                                this.state.estimatedAmount.estimatedAmount,\r\n                        })\r\n                    )\r\n            )\r\n            .catch((error) => console.log('error', error));\r\n    }\r\n\r\n    getMinAmount = () => {\r\n        const [exchangeFrom] = this.state.exchangeFrom;\r\n        const [exchangeTo] = this.state.exchangeTo;\r\n\r\n        fetch(\r\n            `https://api.changenow.io/v1/min-amount/${exchangeFrom.ticker}_${exchangeTo.ticker}?api_key=${API_KEY}`\r\n        )\r\n            .then((response) => response.json())\r\n            .then((data) => this.setState({ minimalAmount: data }))\r\n            .then(() =>\r\n                !this.state.minimalAmount.error\r\n                    ? this.setState({\r\n                          exchangeError: false,\r\n                          exchangeErrorValue: '',\r\n                          inputFromValue: this.state.minimalAmount.minAmount,\r\n                      })\r\n                    : this.setState({\r\n                          inputToValue: '-',\r\n                          exchangeError: true,\r\n                          exchangeErrorValue: this.state.minimalAmount.error,\r\n                          inputFromValue: '0',\r\n                      })\r\n            )\r\n            .then(() =>\r\n                fetch(\r\n                    `https://api.changenow.io/v1/exchange-amount/${this.state.inputFromValue}/${exchangeFrom.ticker}_${exchangeTo.ticker}?api_key=${API_KEY}`\r\n                )\r\n                    .then((response) => response.json())\r\n                    .then((data) => this.setState({ estimatedAmount: data }))\r\n                    .then(() =>\r\n                        this.setState({\r\n                            inputToValue:\r\n                                this.state.estimatedAmount.estimatedAmount,\r\n                        })\r\n                    )\r\n            )\r\n            .catch((error) => console.log('error', error));\r\n    };\r\n\r\n    getEstimatedAmount = () => {\r\n        const [exchangeFrom] = this.state.exchangeFrom;\r\n        const [exchangeTo] = this.state.exchangeTo;\r\n        fetch(\r\n            `https://api.changenow.io/v1/exchange-amount/${this.state.inputFromValue}/${exchangeFrom.ticker}_${exchangeTo.ticker}?api_key=${API_KEY}`\r\n        )\r\n            .then((response) => response.json())\r\n            .then((data) => this.setState({ estimatedAmount: data }))\r\n            .then(() =>\r\n                this.state.estimatedAmount.estimatedAmount\r\n                    ? this.setState({\r\n                          inputToValue:\r\n                              this.state.estimatedAmount.estimatedAmount,\r\n                          exchangeError: false,\r\n                          exchangeErrorValue: '',\r\n                      })\r\n                    : this.setState({\r\n                          inputToValue: '-',\r\n                          exchangeError: true,\r\n                          exchangeErrorValue: this.state.estimatedAmount.error,\r\n                      })\r\n            )\r\n            .catch((error) => console.log('error', error));\r\n    };\r\n\r\n    userValueExchange = (e) => {\r\n        this.setState(\r\n            () => {\r\n                return { inputFromValue: e.target.value };\r\n            },\r\n            () => {\r\n                this.getEstimatedAmount();\r\n            }\r\n        );\r\n    };\r\n\r\n    setFrom = (name, image) => {\r\n        this.setState(\r\n            () => {\r\n                return {\r\n                    exchangeFrom: this.state.currencies.filter(\r\n                        (currency) =>\r\n                            currency.name === name && currency.image === image\r\n                    ),\r\n                    searchFromIsOpened: false,\r\n                    searchFromStringValue: '',\r\n                };\r\n            },\r\n            () => this.getMinAmount()\r\n        );\r\n    };\r\n\r\n    setTo = (name, image) => {\r\n        this.setState(\r\n            () => {\r\n                return {\r\n                    exchangeTo: this.state.currencies.filter(\r\n                        (currency) =>\r\n                            currency.name === name && currency.image === image\r\n                    ),\r\n                    searchToIsOpened: false,\r\n                    searchToStringValue: '',\r\n                };\r\n            },\r\n            () => this.getMinAmount()\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const [exchangeFrom] = this.state.exchangeFrom;\r\n        const [exchangeTo] = this.state.exchangeTo;\r\n        const currentFromIcon = {\r\n            backgroundImage: 'url(' + exchangeFrom.image + ')',\r\n        };\r\n        const currentToIcon = {\r\n            backgroundImage: 'url(' + exchangeTo.image + ')',\r\n        };\r\n        let exchangeToError = 'hidden';\r\n        this.state.exchangeError\r\n            ? (exchangeToError = 'error')\r\n            : (exchangeToError = 'hidden');\r\n        return (\r\n            <div className='App'>\r\n                <div className='exchangeContainer'>\r\n                    <div className='exchangeFrom'>\r\n                        <div className='controls'>\r\n                            {this.state.searchFromIsOpened ? (\r\n                                <Search\r\n                                    searchCurrencies={(e) =>\r\n                                        this.setState({\r\n                                            searchFromStringValue: e,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                <input\r\n                                    type='text'\r\n                                    className={'inputValue'}\r\n                                    onChange={this.userValueExchange}\r\n                                    value={this.state.inputFromValue}\r\n                                    aria-label='Enter the exchange amount'\r\n                                />\r\n                            )}\r\n                            {!this.state.searchFromIsOpened ? (\r\n                                <button\r\n                                    className='currentFrom'\r\n                                    style={currentFromIcon}\r\n                                    onClick={(e) => {\r\n                                        this.setState({\r\n                                            searchFromIsOpened:\r\n                                                !this.state.searchFromIsOpened,\r\n                                        });\r\n                                    }}\r\n                                    aria-label='Select currency to exchange'\r\n                                >\r\n                                    {exchangeFrom.ticker.slice(0, 4)}\r\n                                </button>\r\n                            ) : null}\r\n                            {this.state.searchFromIsOpened ? (\r\n                                <Currencies\r\n                                    searchString={\r\n                                        this.state.searchFromStringValue\r\n                                    }\r\n                                    currencies={this.state.currencies}\r\n                                    setCurrent={this.setFrom}\r\n                                    getMinAmount={this.getMinAmount}\r\n                                />\r\n                            ) : null}\r\n                        </div>\r\n                    </div>\r\n                    <button\r\n                        className='swapTickers'\r\n                        aria-label='Swapping tickers, not available now'\r\n                    ></button>\r\n                    {/* /* This controls change right controls */}\r\n                    <div className='exchangeTo'>\r\n                        <div className='controls'>\r\n                            {this.state.searchToIsOpened ? (\r\n                                <Search\r\n                                    searchCurrencies={(e) =>\r\n                                        this.setState({\r\n                                            searchToStringValue: e,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                <input\r\n                                    type='text'\r\n                                    className='inputValue'\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            inputToValue: e.target.value,\r\n                                        })\r\n                                    }\r\n                                    value={this.state.inputToValue}\r\n                                    aria-label='You will get'\r\n                                />\r\n                            )}\r\n                            {!this.state.searchToIsOpened ? (\r\n                                <button\r\n                                    className='currentTo'\r\n                                    style={currentToIcon}\r\n                                    onClick={(e) => {\r\n                                        this.setState({\r\n                                            searchToIsOpened:\r\n                                                !this.state.searchToIsOpened,\r\n                                        });\r\n                                    }}\r\n                                    aria-label='Select currency to exchange'\r\n                                >\r\n                                    {exchangeTo.ticker.slice(0, 4)}\r\n                                </button>\r\n                            ) : null}\r\n\r\n                            {this.state.searchToIsOpened ? (\r\n                                <Currencies\r\n                                    searchString={\r\n                                        this.state.searchToStringValue\r\n                                    }\r\n                                    currencies={this.state.currencies}\r\n                                    setCurrent={this.setTo}\r\n                                    getMinAmount={this.getMinAmount}\r\n                                />\r\n                            ) : null}\r\n                        </div>\r\n                    </div>\r\n                    <div className='goExchange'>\r\n                        <label htmlFor='exchangeAddress'>\r\n                            Your{' '}\r\n                            {exchangeTo.name ? exchangeTo.name : 'Ethereum'}{' '}\r\n                            address\r\n                            <input\r\n                                type='text'\r\n                                className='exchangeAddress'\r\n                                id='exchangeAddress'\r\n                                aria-label='Enter exchange address'\r\n                            />\r\n                        </label>\r\n                        <button\r\n                            className='exchangeSubmit'\r\n                            aria-label='Make an exchange'\r\n                        >\r\n                            Exchange\r\n                            <div className={exchangeToError}>\r\n                                <span>\r\n                                    {this.state.exchangeErrorValue ===\r\n                                    'deposit_too_small'\r\n                                        ? 'Deposit too small'\r\n                                        : this.state.exchangeErrorValue ===\r\n                                          'pair_is_inactive'\r\n                                        ? 'This pair is disabled now'\r\n                                        : 'Enter deposit'}\r\n                                </span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Widget };\r\n","import React from 'react';\nimport './App.css';\nimport { Widget } from './Components/Widget';\n\nfunction App() {\n    return (\n        <div className={'content'}>\n            <h1>Crypto Exchange</h1>\n            <p>Exchange fast and easy</p>\n            <Widget />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}