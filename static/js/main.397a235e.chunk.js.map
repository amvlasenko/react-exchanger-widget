{"version":3,"sources":["redux/types.js","redux/currenciesReducer.js","redux/estimatedAmountReducer.js","redux/minimalAmountReducer.js","redux/setExchange.js","redux/rootReducer.js","features/ServerAPI.js","redux/actions.js","components/Currency.jsx","components/Currencies.jsx","components/Search.jsx","components/Widget.jsx","App.jsx","index.js"],"names":["FETCH_CURRENCIES","FETCH_MINIMAL_AMOUNT","FETCH_ESTIMATED_AMOUNT","SET_EXCHANGE_FROM","SET_EXCHANGE_TO","initialState","currencies","estimatedAmount","minimalAmount","exchangeFrom","ticker","image","exchangeTo","rootReducer","combineReducers","state","action","type","payload","setExchange","API_KEY","process","a","fetch","promise","json","response","inputFromValue","fetchCurrencies","dispatch","ServerAPI","getCurrenies","currenciesResponse","fetchMinimalAmount","getMinAmount","minimalAmountResponse","setExchangeFrom","currency","setExchangeTo","fetchEstimatedAmount","getEstimatedAmount","estimatedAmountResponse","Currency","props","name","currencyStyle","backgroundImage","className","style","onClick","aria-label","Currencies","filter","includes","searchString","map","Search","search","handleKey","evt","searchCurrencies","placeholder","value","this","onChange","e","setState","target","onKeyDown","React","Component","Widget","useDispatch","useSelector","useState","setInputFromValue","inputToValue","setInputToValue","searchFromIsOpened","setSearchFromIsOpened","searchToIsOpened","setSearchToIsOpened","searchFromStringValue","setSearchFromStringValue","searchToStringValue","setSearchToStringValue","exchangeError","setExchangeError","exchangeErrorValue","setExchangeErrorValue","buildWidget","useCallback","useEffect","error","minAmount","currentFromIcon","currentToIcon","exchangeToError","func","ms","savedArgs","savedThis","isThrottled","throttle","slice","htmlFor","id","App","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","actionCreators","trace","traceLimit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.397a235e.chunk.js","sourcesContent":["export const FETCH_CURRENCIES = 'FETCH_CURRENCIES';\r\nexport const FETCH_MINIMAL_AMOUNT = 'FETCH_MINIMAL_AMOUNT';\r\nexport const FETCH_ESTIMATED_AMOUNT = 'FETCH_ESTIMATED_AMOUNT';\r\nexport const SET_EXCHANGE_FROM = 'SET_EXCHANGE_FROM';\r\nexport const SET_EXCHANGE_TO = 'SET_EXCHANGE_TO';\r\n","import { FETCH_CURRENCIES } from './types';\r\n\r\nconst initialState = {\r\n    currencies: [],\r\n};\r\n\r\nexport const currenciesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_CURRENCIES:\r\n            return { ...state, currencies: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { FETCH_ESTIMATED_AMOUNT } from \"./types\";\r\n\r\nconst initialState = {\r\n    estimatedAmount: '',\r\n};\r\n\r\nexport const estimatedAmountReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_ESTIMATED_AMOUNT:\r\n            return { ...state, estimatedAmount: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { FETCH_MINIMAL_AMOUNT } from \"./types\";\r\n\r\nconst initialState = {\r\n    minimalAmount: 0,\r\n};\r\n\r\nexport const minimalAmountReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_MINIMAL_AMOUNT:\r\n            return { ...state, minimalAmount: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { SET_EXCHANGE_FROM, SET_EXCHANGE_TO } from \"./types\";\r\n\r\nconst initialState = {\r\n    exchangeFrom: {\r\n        ticker: 'btc',\r\n        image: 'https://changenow.io/images/sprite/currencies/btc.svg',\r\n    },\r\n    exchangeTo: {\r\n        ticker: 'eth',\r\n        image: 'https://changenow.io/images/sprite/currencies/eth.svg',\r\n    },\r\n};\r\n\r\nexport const setExchange = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_EXCHANGE_FROM:\r\n            return { ...state, exchangeFrom: action.payload }\r\n            case SET_EXCHANGE_TO:\r\n            return { ...state, exchangeTo: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from 'redux';\r\nimport { currenciesReducer } from './currenciesReducer';\r\nimport { estimatedAmountReducer } from './estimatedAmountReducer';\r\nimport {minimalAmountReducer} from './minimalAmountReducer'\r\nimport { setExchange } from './setExchange';\r\n\r\nexport const rootReducer = combineReducers({\r\n    currencies: currenciesReducer,\r\n    minimalAmount: minimalAmountReducer,\r\n    setExchange: setExchange,\r\n    estimatedAmount: estimatedAmountReducer\r\n});\r\n","const API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nexport default new (class ServerAPI {\r\n    async getCurrenies() {\r\n        let promise = await fetch(\r\n            `https://api.changenow.io/v1/currencies?active=true&fixedRate=true`\r\n        );\r\n        let response = await promise.json();\r\n        return response;\r\n    }\r\n\r\n    async getMinAmount(exchangeFrom, exchangeTo) {\r\n        let promise = await fetch(\r\n            `https://api.changenow.io/v1/min-amount/${exchangeFrom}_${exchangeTo}?api_key=${API_KEY}`\r\n        );\r\n        let response = await promise.json();\r\n        return response;\r\n    }\r\n\r\n    async getEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo) {\r\n        let promise = await fetch(\r\n            `https://api.changenow.io/v1/exchange-amount/${inputFromValue}/${exchangeFrom}_${exchangeTo}?api_key=${API_KEY}`\r\n        );\r\n        let response = await promise.json();\r\n        return response;\r\n    }\r\n})();\r\n","import ServerAPI from '../features/ServerAPI';\r\nimport { FETCH_CURRENCIES, FETCH_ESTIMATED_AMOUNT, FETCH_MINIMAL_AMOUNT, SET_EXCHANGE_FROM, SET_EXCHANGE_TO } from './types';\r\n\r\nexport function fetchCurrencies() {\r\n    return async (dispatch) => {\r\n        let currenciesResponse = await ServerAPI.getCurrenies();\r\n        dispatch({ type: FETCH_CURRENCIES, payload: currenciesResponse });\r\n    };\r\n}\r\n\r\nexport function fetchMinimalAmount(exchangeFrom, exchangeTo) {\r\n    return async (dispatch) => {\r\n        let minimalAmountResponse = await ServerAPI.getMinAmount(exchangeFrom, exchangeTo);\r\n        dispatch({ type: FETCH_MINIMAL_AMOUNT, payload: minimalAmountResponse });\r\n    };\r\n}\r\n\r\nexport function setExchangeFrom(currency) {\r\n    return (dispatch) => {\r\n        dispatch({ type: SET_EXCHANGE_FROM, payload: currency });\r\n    }\r\n}\r\n\r\nexport function setExchangeTo(currency) {\r\n    return (dispatch) => {\r\n        dispatch({ type: SET_EXCHANGE_TO, payload: currency });\r\n    }\r\n}\r\n\r\nexport function fetchEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo) {\r\n    return async (dispatch) => {\r\n        let estimatedAmountResponse = await ServerAPI.getEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo);\r\n        dispatch({ type: FETCH_ESTIMATED_AMOUNT, payload: estimatedAmountResponse });\r\n    };\r\n}\r\n\r\n","function Currency(props) {\r\n  const { ticker, name, image, setExchange } = props;\r\n  const currencyStyle = {\r\n    backgroundImage: 'url(' + image + ')',\r\n  };\r\n\r\n  const handler = () => {\r\n    setExchange(name, image);\r\n  };\r\n\r\n  return (\r\n    <div className='exchange-currency'>\r\n      <button style={currencyStyle} onClick={handler} aria-label={name}>\r\n        <span className={'cryptoTicker'}>{ticker} </span>\r\n        <span className={'cryptoName'}>{name}</span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport { Currency };\r\n","import { Currency } from './Currency';\r\n\r\nfunction Currencies(props) {\r\n  return (\r\n    <div className='currencies'>\r\n      {props.currencies\r\n        .filter(\r\n          (currency) =>\r\n            currency.name.includes(props.searchString) ||\r\n            currency.ticker.includes(props.searchString)\r\n        )\r\n        .map((currency) => (\r\n          <Currency\r\n            key={currency.name}\r\n            {...currency}\r\n            name={currency.name}\r\n            setExchange={props.setExchange}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Currencies };\r\n","import React from 'react';\r\n\r\nclass Search extends React.Component {\r\n    state = {\r\n        search: '',\r\n    };\r\n\r\n    handleKey = (evt) => {\r\n        this.props.searchCurrencies(this.state.search);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                type='search'\r\n                className='user-search'\r\n                placeholder='Search'\r\n                value={this.state.search}\r\n                onChange={(e) => this.setState({ search: e.target.value })}\r\n                onKeyDown={this.handleKey}\r\n                aria-label='Enter the name or ticker of the currency to search'\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport { Search };\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ServerAPI from '../features/ServerAPI';\r\nimport {\r\n  fetchCurrencies,\r\n  fetchMinimalAmount,\r\n  setExchangeTo,\r\n  setExchangeFrom,\r\n  fetchEstimatedAmount,\r\n} from '../redux/actions';\r\nimport { Currencies } from './Currencies';\r\nimport { Search } from './Search';\r\n\r\nfunction Widget() {\r\n  const dispatch = useDispatch();\r\n  const currencies = useSelector((state) => state.currencies.currencies);\r\n  const exchangeFrom = useSelector((state) => state.setExchange.exchangeFrom);\r\n  const exchangeTo = useSelector((state) => state.setExchange.exchangeTo);\r\n  const minimalAmount = useSelector(\r\n    (state) => state.minimalAmount.minimalAmount\r\n  );\r\n  const estimatedAmount = useSelector(\r\n    (state) => state.estimatedAmount.estimatedAmount\r\n  );\r\n\r\n  const [inputFromValue, setInputFromValue] = useState('');\r\n  const [inputToValue, setInputToValue] = useState('');\r\n  const [searchFromIsOpened, setSearchFromIsOpened] = useState(false);\r\n  const [searchToIsOpened, setSearchToIsOpened] = useState(false);\r\n  const [searchFromStringValue, setSearchFromStringValue] = useState('');\r\n  const [searchToStringValue, setSearchToStringValue] = useState('');\r\n  const [exchangeError, setExchangeError] = useState(false);\r\n  const [exchangeErrorValue, setExchangeErrorValue] = useState('');\r\n\r\n  const buildWidget = useCallback(() => {\r\n    dispatch(fetchCurrencies());\r\n    dispatch(fetchMinimalAmount(exchangeFrom.ticker, exchangeTo.ticker));\r\n  }, [dispatch, exchangeFrom, exchangeTo]);\r\n\r\n  useEffect(() => {\r\n    buildWidget();\r\n  }, [buildWidget]);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      fetchEstimatedAmount(\r\n        inputFromValue,\r\n        exchangeFrom.ticker,\r\n        exchangeTo.ticker\r\n      )\r\n    );\r\n  }, [inputFromValue]);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchMinimalAmount(exchangeFrom.ticker, exchangeTo.ticker));\r\n  }, [dispatch, exchangeFrom, exchangeTo]);\r\n\r\n  useEffect(() => {\r\n    setExchangeError(!minimalAmount.error ? false : true);\r\n    setExchangeErrorValue(!minimalAmount.error ? '' : minimalAmount.error);\r\n    setInputFromValue(!minimalAmount.error ? minimalAmount.minAmount : '0');\r\n  }, [minimalAmount]);\r\n\r\n  useEffect(() => {\r\n    setExchangeError(estimatedAmount.estimatedAmount ? false : true);\r\n    setExchangeErrorValue(\r\n      estimatedAmount.estimatedAmount ? '' : estimatedAmount.error\r\n    );\r\n    setInputToValue(\r\n      estimatedAmount.estimatedAmount ? estimatedAmount.estimatedAmount : '-'\r\n    );\r\n  }, [estimatedAmount]);\r\n\r\n  const throttle = (func, ms) => {\r\n    let isThrottled = false,\r\n      savedArgs,\r\n      savedThis;\r\n\r\n    function wrapper() {\r\n      if (isThrottled) {\r\n        savedArgs = arguments;\r\n        savedThis = this;\r\n        return;\r\n      }\r\n\r\n      func.apply(this, arguments);\r\n\r\n      isThrottled = true;\r\n\r\n      setTimeout(function () {\r\n        isThrottled = false;\r\n        if (savedArgs) {\r\n          wrapper.apply(savedThis, savedArgs);\r\n          savedArgs = savedThis = null;\r\n        }\r\n      }, ms);\r\n    }\r\n\r\n    return wrapper;\r\n  };\r\n\r\n  const userValueFrom = (e) => {\r\n    setInputFromValue(e.target.value);\r\n\r\n    throttle(\r\n      ServerAPI.getEstimatedAmount(\r\n        inputFromValue,\r\n        exchangeFrom.ticker,\r\n        exchangeTo.ticker\r\n      ),\r\n      500\r\n    );\r\n  };\r\n\r\n  const setFrom = (name, image) => {\r\n    dispatch(\r\n      setExchangeFrom(\r\n        ...currencies.filter(\r\n          (currency) => currency.name === name && currency.image === image\r\n        )\r\n      )\r\n    );\r\n    setSearchFromIsOpened(false);\r\n    setSearchFromStringValue('');\r\n  };\r\n\r\n  const setTo = (name, image) => {\r\n    dispatch(\r\n      setExchangeTo(\r\n        ...currencies.filter(\r\n          (currency) => currency.name === name && currency.image === image\r\n        )\r\n      )\r\n    );\r\n    setSearchToIsOpened(false);\r\n    setSearchToStringValue('');\r\n  };\r\n\r\n  let currentFromIcon = {\r\n    backgroundImage: 'url(' + exchangeFrom.image + ')',\r\n  };\r\n  let currentToIcon = {\r\n    backgroundImage: 'url(' + exchangeTo.image + ')',\r\n  };\r\n  let exchangeToError = 'hidden';\r\n  exchangeError ? (exchangeToError = 'error') : (exchangeToError = 'hidden');\r\n  return (\r\n    <div className='App'>\r\n      <div className='exchangeContainer'>\r\n        <div className='exchangeFrom'>\r\n          <div className='controls'>\r\n            {searchFromIsOpened ? (\r\n              <Search\r\n                searchCurrencies={(e) =>\r\n                  setSearchFromStringValue(e.target.value)\r\n                }\r\n              />\r\n            ) : (\r\n              <input\r\n                type='text'\r\n                className={'inputValue'}\r\n                onChange={userValueFrom}\r\n                value={inputFromValue}\r\n                aria-label='Enter the exchange amount'\r\n              />\r\n            )}\r\n            {!searchFromIsOpened ? (\r\n              <button\r\n                className='currentFrom'\r\n                style={currentFromIcon}\r\n                onClick={(e) => {\r\n                  setSearchFromIsOpened(!searchFromIsOpened);\r\n                }}\r\n                aria-label='Select currency to exchange'\r\n              >\r\n                {exchangeFrom.ticker.slice(0, 4)}\r\n              </button>\r\n            ) : null}\r\n            {searchFromIsOpened ? (\r\n              <Currencies\r\n                searchString={searchFromStringValue}\r\n                currencies={currencies}\r\n                setExchange={setFrom}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <button\r\n          className='swapTickers'\r\n          aria-label='Swapping tickers, not available now'\r\n        ></button>\r\n        {/* /* This controls change right controls */}\r\n        <div className='exchangeTo'>\r\n          <div className='controls'>\r\n            {searchToIsOpened ? (\r\n              <Search\r\n                searchCurrencies={(e) => setSearchToStringValue(e.target.value)}\r\n              />\r\n            ) : (\r\n              <input\r\n                type='text'\r\n                className='inputValue'\r\n                onChange={(e) => {\r\n                  setInputToValue(e.target.value);\r\n                }}\r\n                value={inputToValue}\r\n                aria-label='You will get'\r\n              />\r\n            )}\r\n            {!searchToIsOpened ? (\r\n              <button\r\n                className='currentTo'\r\n                style={currentToIcon}\r\n                onClick={(e) => {\r\n                  setSearchToIsOpened(!searchToIsOpened);\r\n                }}\r\n                aria-label='Select currency to exchange'\r\n              >\r\n                {exchangeTo.ticker.slice(0, 4)}\r\n              </button>\r\n            ) : null}\r\n\r\n            {searchToIsOpened ? (\r\n              <Currencies\r\n                searchString={searchToStringValue}\r\n                currencies={currencies}\r\n                setExchange={setTo}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div className='goExchange'>\r\n          <label htmlFor='exchangeAddress'>\r\n            Your {exchangeTo.name ? exchangeTo.name : 'Ethereum'} address\r\n            <input\r\n              type='text'\r\n              className='exchangeAddress'\r\n              id='exchangeAddress'\r\n              aria-label='Enter exchange address'\r\n            />\r\n          </label>\r\n          <button className='exchangeSubmit' aria-label='Make an exchange'>\r\n            Exchange\r\n            <div className={exchangeToError}>\r\n              <span>\r\n                {exchangeErrorValue === 'deposit_too_small'\r\n                  ? 'Deposit too small'\r\n                  : exchangeErrorValue === 'pair_is_inactive'\r\n                  ? 'This pair is disabled now'\r\n                  : 'Enter deposit'}\r\n              </span>\r\n            </div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Widget };\r\n","import React from 'react';\r\nimport { Widget } from './components/Widget';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={'content'}>\r\n      <h1>Crypto Exchange</h1>\r\n      <p>Exchange fast and easy</p>\r\n      <Widget />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { rootReducer } from './redux/rootReducer';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport * as actionCreators from './redux/actions'\r\n\r\n\r\n// const composeEnhancers = composeWithDevTools({ actionCreators, trace: true, traceLimit: 25 });\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(\r\n        applyMiddleware(thunk),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n            window.__REDUX_DEVTOOLS_EXTENSION__({ actionCreators, trace: true, traceLimit: 25 })\r\n    )\r\n);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}