{"version":3,"sources":["redux/types.js","redux/currenciesReducer.js","redux/estimatedAmountReducer.js","redux/minimalAmountReducer.js","redux/setExchange.js","redux/rootReducer.js","features/ServerAPI.js","redux/actions.js","components/Currency.jsx","components/Currencies.jsx","components/Search.jsx","components/Widget.jsx","App.jsx","index.js"],"names":["FETCH_CURRENCIES","FETCH_MINIMAL_AMOUNT","FETCH_ESTIMATED_AMOUNT","SET_EXCHANGE_FROM","SET_EXCHANGE_TO","initialState","currencies","estimatedAmount","minimalAmount","exchangeFrom","ticker","image","exchangeTo","rootReducer","combineReducers","state","action","type","payload","setExchange","API_KEY","process","REACT_APP_API_KEY","a","fetch","promise","json","response","inputFromValue","fetchMinimalAmount","dispatch","ServerAPI","getMinAmount","minimalAmountResponse","setExchangeFrom","currency","setExchangeTo","Currency","props","name","currencyStyle","backgroundImage","className","style","onClick","aria-label","Currencies","filter","includes","searchString","map","Search","search","handleKey","evt","searchCurrencies","placeholder","value","this","onChange","e","setState","target","onKeyDown","React","Component","Widget","useDispatch","useSelector","useState","setInputFromValue","inputToValue","setInputToValue","searchFromIsOpened","setSearchFromIsOpened","searchToIsOpened","setSearchToIsOpened","searchFromStringValue","setSearchFromStringValue","searchToStringValue","setSearchToStringValue","exchangeError","setExchangeError","exchangeErrorValue","setExchangeErrorValue","buildWidget","useCallback","getCurrenies","currenciesResponse","useEffect","getEstimatedAmount","estimatedAmountResponse","fetchEstimatedAmount","error","minAmount","currentFromIcon","currentToIcon","exchangeToError","func","ms","savedArgs","savedThis","isThrottled","throttle","slice","htmlFor","id","App","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c7ece9e.chunk.js","sourcesContent":["export const FETCH_CURRENCIES = 'FETCH_CURRENCIES';\nexport const FETCH_MINIMAL_AMOUNT = 'FETCH_MINIMAL_AMOUNT';\nexport const FETCH_ESTIMATED_AMOUNT = 'FETCH_ESTIMATED_AMOUNT';\nexport const SET_EXCHANGE_FROM = 'SET_EXCHANGE_FROM';\nexport const SET_EXCHANGE_TO = 'SET_EXCHANGE_TO';\n","import { FETCH_CURRENCIES } from './types';\n\nconst initialState = {\n    currencies: [],\n};\n\nexport const currenciesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_CURRENCIES:\n            return { ...state, currencies: action.payload };\n        default:\n            return state;\n    }\n};\n","import { FETCH_ESTIMATED_AMOUNT } from \"./types\";\n\nconst initialState = {\n    estimatedAmount: '',\n};\n\nexport const estimatedAmountReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_ESTIMATED_AMOUNT:\n            return { ...state, estimatedAmount: action.payload };\n        default:\n            return state;\n    }\n};","import { FETCH_MINIMAL_AMOUNT } from \"./types\";\n\nconst initialState = {\n    minimalAmount: 0,\n};\n\nexport const minimalAmountReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_MINIMAL_AMOUNT:\n            return { ...state, minimalAmount: action.payload };\n        default:\n            return state;\n    }\n};","import { SET_EXCHANGE_FROM, SET_EXCHANGE_TO } from \"./types\";\n\nconst initialState = {\n    exchangeFrom: {\n        ticker: 'btc',\n        image: 'https://changenow.io/images/sprite/currencies/btc.svg',\n    },\n    exchangeTo: {\n        ticker: 'eth',\n        image: 'https://changenow.io/images/sprite/currencies/eth.svg',\n    },\n};\n\nexport const setExchange = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_EXCHANGE_FROM:\n            return { ...state, exchangeFrom: action.payload }\n            case SET_EXCHANGE_TO:\n            return { ...state, exchangeTo: action.payload }\n        default:\n            return state;\n    }\n};","import { combineReducers } from 'redux';\nimport { currenciesReducer } from './currenciesReducer';\nimport { estimatedAmountReducer } from './estimatedAmountReducer';\nimport {minimalAmountReducer} from './minimalAmountReducer'\nimport { setExchange } from './setExchange';\n\nexport const rootReducer = combineReducers({\n    currencies: currenciesReducer,\n    minimalAmount: minimalAmountReducer,\n    setExchange: setExchange,\n    estimatedAmount: estimatedAmountReducer\n});\n","const API_KEY = process.env.REACT_APP_API_KEY;\n\nexport default new (class ServerAPI {\n    async getCurrenies() {\n        let promise = await fetch(\n            `https://api.changenow.io/v1/currencies?active=true&fixedRate=true`\n        );\n        let response = await promise.json();\n        return response;\n    }\n\n    async getMinAmount(exchangeFrom, exchangeTo) {\n        let promise = await fetch(\n            `https://api.changenow.io/v1/min-amount/${exchangeFrom}_${exchangeTo}?api_key=${API_KEY}`\n        );\n        let response = await promise.json();\n        return response;\n    }\n\n    async getEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo) {\n        let promise = await fetch(\n            `https://api.changenow.io/v1/exchange-amount/${inputFromValue}/${exchangeFrom}_${exchangeTo}?api_key=${API_KEY}`\n        );\n        let response = await promise.json();\n        return response;\n    }\n})();\n","import ServerAPI from '../features/ServerAPI';\nimport { FETCH_CURRENCIES, FETCH_ESTIMATED_AMOUNT, FETCH_MINIMAL_AMOUNT, SET_EXCHANGE_FROM, SET_EXCHANGE_TO } from './types';\n\nexport function fetchCurrencies() {\n    return async (dispatch) => {\n        let currenciesResponse = await ServerAPI.getCurrenies();\n        dispatch({ type: FETCH_CURRENCIES, payload: currenciesResponse });\n    };\n}\n\nexport function fetchMinimalAmount(exchangeFrom, exchangeTo) {\n    return async (dispatch) => {\n        let minimalAmountResponse = await ServerAPI.getMinAmount(exchangeFrom, exchangeTo);\n        dispatch({ type: FETCH_MINIMAL_AMOUNT, payload: minimalAmountResponse });\n    };\n}\n\nexport function setExchangeFrom(currency) {\n    return (dispatch) => {\n        dispatch({ type: SET_EXCHANGE_FROM, payload: currency });\n    }\n}\n\nexport function setExchangeTo(currency) {\n    return (dispatch) => {\n        dispatch({ type: SET_EXCHANGE_TO, payload: currency });\n    }\n}\n\nexport function fetchEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo) {\n    return async (dispatch) => {\n        let estimatedAmountResponse = await ServerAPI.getEstimatedAmount(inputFromValue, exchangeFrom, exchangeTo);\n        dispatch({ type: FETCH_ESTIMATED_AMOUNT, payload: estimatedAmountResponse });\n    };\n}\n\n","function Currency(props) {\n  const { ticker, name, image, setExchange } = props;\n  const currencyStyle = {\n    backgroundImage: 'url(' + image + ')',\n  };\n\n  const handler = () => {\n    setExchange(name, image);\n  };\n\n  return (\n    <div className='exchange-currency'>\n      <button style={currencyStyle} onClick={handler} aria-label={name}>\n        <span className={'cryptoTicker'}>{ticker} </span>\n        <span className={'cryptoName'}>{name}</span>\n      </button>\n    </div>\n  );\n}\nexport { Currency };\n","import { Currency } from './Currency';\n\nfunction Currencies(props) {\n  return (\n    <div className='currencies'>\n      {props.currencies\n        .filter(\n          (currency) =>\n            currency.name.includes(props.searchString) ||\n            currency.ticker.includes(props.searchString)\n        )\n        .map((currency) => (\n          <Currency\n            key={currency.name}\n            {...currency}\n            name={currency.name}\n            setExchange={props.setExchange}\n          />\n        ))}\n    </div>\n  );\n}\n\nexport { Currencies };\n","import React from 'react';\n\nclass Search extends React.Component {\n    state = {\n        search: '',\n    };\n\n    handleKey = (evt) => {\n        this.props.searchCurrencies(this.state.search);\n    };\n\n    render() {\n        return (\n            <input\n                type='search'\n                className='user-search'\n                placeholder='Search'\n                value={this.state.search}\n                onChange={(e) => this.setState({ search: e.target.value })}\n                onKeyDown={this.handleKey}\n                aria-label='Enter the name or ticker of the currency to search'\n            />\n        );\n    }\n}\n\nexport { Search };\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ServerAPI from '../features/ServerAPI';\nimport {\n  fetchCurrencies,\n  fetchMinimalAmount,\n  setExchangeTo,\n  setExchangeFrom,\n  fetchEstimatedAmount,\n} from '../redux/actions';\nimport { Currencies } from './Currencies';\nimport { Search } from './Search';\n\nfunction Widget() {\n  const dispatch = useDispatch();\n  const currencies = useSelector((state) => state.currencies.currencies);\n  const exchangeFrom = useSelector((state) => state.setExchange.exchangeFrom);\n  const exchangeTo = useSelector((state) => state.setExchange.exchangeTo);\n  const minimalAmount = useSelector(\n    (state) => state.minimalAmount.minimalAmount\n  );\n  const estimatedAmount = useSelector(\n    (state) => state.estimatedAmount.estimatedAmount\n  );\n\n  const [inputFromValue, setInputFromValue] = useState('');\n  const [inputToValue, setInputToValue] = useState('');\n  const [searchFromIsOpened, setSearchFromIsOpened] = useState(false);\n  const [searchToIsOpened, setSearchToIsOpened] = useState(false);\n  const [searchFromStringValue, setSearchFromStringValue] = useState('');\n  const [searchToStringValue, setSearchToStringValue] = useState('');\n  const [exchangeError, setExchangeError] = useState(false);\n  const [exchangeErrorValue, setExchangeErrorValue] = useState('');\n\n  const buildWidget = useCallback(() => {\n    dispatch(fetchCurrencies());\n    dispatch(fetchMinimalAmount(exchangeFrom.ticker, exchangeTo.ticker));\n  }, [dispatch, exchangeFrom, exchangeTo]);\n\n  useEffect(() => {\n    buildWidget();\n  }, [buildWidget]);\n\n  useEffect(() => {\n    dispatch(\n      fetchEstimatedAmount(\n        inputFromValue,\n        exchangeFrom.ticker,\n        exchangeTo.ticker\n      )\n    );\n  }, [inputFromValue]);\n\n  useEffect(() => {\n    dispatch(fetchMinimalAmount(exchangeFrom.ticker, exchangeTo.ticker));\n  }, [dispatch, exchangeFrom, exchangeTo]);\n\n  useEffect(() => {\n    setExchangeError(!minimalAmount.error ? false : true);\n    setExchangeErrorValue(!minimalAmount.error ? '' : minimalAmount.error);\n    setInputFromValue(!minimalAmount.error ? minimalAmount.minAmount : '0');\n  }, [minimalAmount]);\n\n  useEffect(() => {\n    setExchangeError(estimatedAmount.estimatedAmount ? false : true);\n    setExchangeErrorValue(\n      estimatedAmount.estimatedAmount ? '' : estimatedAmount.error\n    );\n    setInputToValue(\n      estimatedAmount.estimatedAmount ? estimatedAmount.estimatedAmount : '-'\n    );\n  }, [estimatedAmount]);\n\n  const throttle = (func, ms) => {\n    let isThrottled = false,\n      savedArgs,\n      savedThis;\n\n    function wrapper() {\n      if (isThrottled) {\n        savedArgs = arguments;\n        savedThis = this;\n        return;\n      }\n\n      func.apply(this, arguments);\n\n      isThrottled = true;\n\n      setTimeout(function () {\n        isThrottled = false;\n        if (savedArgs) {\n          wrapper.apply(savedThis, savedArgs);\n          savedArgs = savedThis = null;\n        }\n      }, ms);\n    }\n\n    return wrapper;\n  };\n\n  const userValueFrom = (e) => {\n    setInputFromValue(e.target.value);\n\n    throttle(\n      ServerAPI.getEstimatedAmount(\n        inputFromValue,\n        exchangeFrom.ticker,\n        exchangeTo.ticker\n      ),\n      500\n    );\n  };\n\n  const setFrom = (name, image) => {\n    dispatch(\n      setExchangeFrom(\n        ...currencies.filter(\n          (currency) => currency.name === name && currency.image === image\n        )\n      )\n    );\n    setSearchFromIsOpened(false);\n    setSearchFromStringValue('');\n  };\n\n  const setTo = (name, image) => {\n    dispatch(\n      setExchangeTo(\n        ...currencies.filter(\n          (currency) => currency.name === name && currency.image === image\n        )\n      )\n    );\n    setSearchToIsOpened(false);\n    setSearchToStringValue('');\n  };\n\n  let currentFromIcon = {\n    backgroundImage: 'url(' + exchangeFrom.image + ')',\n  };\n  let currentToIcon = {\n    backgroundImage: 'url(' + exchangeTo.image + ')',\n  };\n  let exchangeToError = 'hidden';\n  exchangeError ? (exchangeToError = 'error') : (exchangeToError = 'hidden');\n  return (\n    <div className='App'>\n      <div className='exchangeContainer'>\n        <div className='exchangeFrom'>\n          <div className='controls'>\n            {searchFromIsOpened ? (\n              <Search\n                searchCurrencies={(e) =>\n                  setSearchFromStringValue(e.target.value)\n                }\n              />\n            ) : (\n              <input\n                type='text'\n                className={'inputValue'}\n                onChange={userValueFrom}\n                value={inputFromValue}\n                aria-label='Enter the exchange amount'\n              />\n            )}\n            {!searchFromIsOpened ? (\n              <button\n                className='currentFrom'\n                style={currentFromIcon}\n                onClick={(e) => {\n                  setSearchFromIsOpened(!searchFromIsOpened);\n                }}\n                aria-label='Select currency to exchange'\n              >\n                {exchangeFrom.ticker.slice(0, 4)}\n              </button>\n            ) : null}\n            {searchFromIsOpened ? (\n              <Currencies\n                searchString={searchFromStringValue}\n                currencies={currencies}\n                setExchange={setFrom}\n              />\n            ) : null}\n          </div>\n        </div>\n        <button\n          className='swapTickers'\n          aria-label='Swapping tickers, not available now'\n        ></button>\n        {/* /* This controls change right controls */}\n        <div className='exchangeTo'>\n          <div className='controls'>\n            {searchToIsOpened ? (\n              <Search\n                searchCurrencies={(e) => setSearchToStringValue(e.target.value)}\n              />\n            ) : (\n              <input\n                type='text'\n                className='inputValue'\n                onChange={(e) => {\n                  setInputToValue(e.target.value);\n                }}\n                value={inputToValue}\n                aria-label='You will get'\n              />\n            )}\n            {!searchToIsOpened ? (\n              <button\n                className='currentTo'\n                style={currentToIcon}\n                onClick={(e) => {\n                  setSearchToIsOpened(!searchToIsOpened);\n                }}\n                aria-label='Select currency to exchange'\n              >\n                {exchangeTo.ticker.slice(0, 4)}\n              </button>\n            ) : null}\n\n            {searchToIsOpened ? (\n              <Currencies\n                searchString={searchToStringValue}\n                currencies={currencies}\n                setExchange={setTo}\n              />\n            ) : null}\n          </div>\n        </div>\n        <div className='goExchange'>\n          <label htmlFor='exchangeAddress'>\n            Your {exchangeTo.name ? exchangeTo.name : 'Ethereum'} address\n            <input\n              type='text'\n              className='exchangeAddress'\n              id='exchangeAddress'\n              aria-label='Enter exchange address'\n            />\n          </label>\n          <button className='exchangeSubmit' aria-label='Make an exchange'>\n            Exchange\n            <div className={exchangeToError}>\n              <span>\n                {exchangeErrorValue === 'deposit_too_small'\n                  ? 'Deposit too small'\n                  : exchangeErrorValue === 'pair_is_inactive'\n                  ? 'This pair is disabled now'\n                  : 'Enter deposit'}\n              </span>\n            </div>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { Widget };\n","import React from 'react';\nimport { Widget } from './components/Widget';\n\nfunction App() {\n  return (\n    <div className={'content'}>\n      <h1>Crypto Exchange</h1>\n      <p>Exchange fast and easy</p>\n      <Widget />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { rootReducer } from './redux/rootReducer';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport * as actionCreators from './redux/actions'\n\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk)\n    )\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}